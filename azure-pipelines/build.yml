parameters:
- name: versionNumberOverride
  type: string
  default: 'default'
- name: vmImageName
  type: string
  default: ''
- name: platform
  type: string

jobs:
- job:
  displayName: 'Build ${{ parameters.platform }} prerelease vsixs'
  pool:
    name: Azure Pipelines
    vmImage: ${{ parameters.vmImageName }}
  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchTags: false
    fetchDepth: 0

  - template: prereqs.yml
    parameters:
      versionNumberOverride: ${{ parameters.versionNumberOverride }}

  - script: gulp vsix:release:package:${{ parameters.platform }} --prerelease
    displayName: 'Build VSIXs'

  - task: PublishBuildArtifacts@1
    # Run the publish step so we have vsix's even if the tests fail.
    condition: succeededOrFailed()
    displayName: 'Publish VSIXs'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/vsix'
      ArtifactName: 'VSIX_Prerelease_$(System.JobAttempt)'

  - script: npm run test:artifacts
    displayName: 'Run artifacts tests'

- job:
  displayName: 'Build ${{ parameters.platform }} release vsixs'
  pool:
    name: Azure Pipelines
    vmImage: ${{ parameters.vmImageName }}
  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchTags: false
    fetchDepth: 0

  - template: prereqs.yml
    parameters:
      versionNumberOverride: ${{ parameters.versionNumberOverride }}

  - script: gulp vsix:release:package:${{ parameters.platform }}
    displayName: 'Build VSIXs'

  - task: PublishBuildArtifacts@1
    # Run the publish step so we have vsix's even if the tests fail.
    condition: succeededOrFailed()
    displayName: 'Publish VSIXs'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/vsix'
      ArtifactName: 'VSIX_Release_$(System.JobAttempt)'

  - script: npm run test:artifacts
    displayName: 'Run artifacts tests'
  